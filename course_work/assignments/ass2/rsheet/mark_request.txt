# RSheets Mark Request

# Marked Questions

These questions are listed in the spec, and you must fill them out
to receive marks for the Design Questions.

## Question 1:

Using a 'Command' struct (found in the structs.rs file) which could 
either be `Get(String)` or `Set(String, String)` or `None`. 
1) Parses the line with the `parse_command` function. If an
 error is detected, then our command becomes a `Command::None`, otherwise
 it will be either Get or Set.
2) Command is passed to the `execute_command` function which
matches the different cases, extracts the arguments.
Returns a `Result<Option<Reply>, String>` type, since a Set command does 
not return anything, but it may return a Reply or an error.

An alternative representation would be to do the parsing of the command
and the execution in the same function, thus removing the need for the
'intermediate' Command struct. However, this would make the code less modular
and would make the parse and execute function exceedingly long. I think
my approach is better since you can separate out the logic of interpreting
and executing the commands (producing different errors).

## Question 2: 

I handle the Scalar, Vector and Matrix variable cases in the `convert_variables`
function. I do this by having a separate regex string for the three types,
and matching the variable to each, and processing them accordingly.
There is some duplication in code in that the Scalar matches on only one
`cell_value`, Vector does this matching in a loop, and Matrix does this
same matching again in a nested loop. However, I do think this is justified,
in that we are creating different data structures in each case, for example in
the innermost Matrix loop, we are pushing to a Vec, and at the conclusion of
each innermost loop we push that Vec to another Vec, creating a 2D Vec.
It's possible that I could have made the matching of the `cell_value` as its
own function to avoid code re-duplication, but it wouldn't have saved writing
lots of code.

## Question 3: 

Mostly contained in the highest-level `start_server` function. Separate 
thread handles dependency updates (running in a loop inside the 
`handle_dependency_updates` function, with a `Receiver`), and a thread 
for each connection that the manager receives (running in a loop in the 
`handle_connection` function, with a `Sender`).

`Sender` and `Receiver` used so that each "connection thread" can communicate 
to the "dependency thread".

Thread-safety maintained by using a `Arc<RwLock<...>>` around the map containing the 
cell values, so multiple threads could be reading at the same time from the spreadsheet 
but only ever one writing - avoiding the problem of mutexes which lock it completely.

Was initially single-threaded- no separate thread for the dependency 
updates - it would be called directly on updates (no need for a tx/rx pair across the 
threads). Meant that the code simply ran in a loop in the `handle_connection` function.

## Question 4: 

This complex edge case was essentially handled automatically because of my design choice.
The thread that gets spawned first takes an `Arc<RwLock<...>>` of the cells, and thus
it locks the `cells` object from being written to while the first thread is executing.
More specifically, the `execute_command` takes a `&mut` of cells, which, as we know, can
only ever be borrowed by one thread exclusively. Essentially, threads which are performing
the `Set` operations are blocking on each other, whereas the threads performing the `Get`
operations are not - due to the `RwLock` around the `cells` object.
See lines 35 and 63.

## Question 5: 

The thread that is used to perform the calculations of updated dependencies is the one
spawned at line 28, which operates the `handle_dependency_updates` function. It takes a
receiver which received updates from the threads performing the `Set` operations.
It maintains a graph of "dependency nodes" which contain connections to downstream nodes
that also need updating. These dependency nodes contain their address, formula, and any
neighbours that depend on that node. It also performs a `detect_cycle` operation to check
that we have no cyclical dependencies between nodes.

If I instead used multiple threads to calculate dependency updates, I could have each
thread that is performing the `Set` operations spawn a new thread to perform the
dependency updates after a cell has been `Set`. This would remove the need for having
a sender/receiver between threads, since the thread that spawn the new thread could
parse all the required information directly to the thread it's just spawned.
